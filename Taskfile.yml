# https://taskfile.dev/usage/
version: '3'
vars:
  ## holders
  ALICE_ADDRESS: 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266
  ## Create2
  # anvil default Create2 factory
  # ANVIL_DEFAULT_CREATE2_FACTORY: "0x4e59b44847b379578588920ca78fbf26c0b4956c"
  CREATE2_FACTORY: 0x5FbDB2315678afecb367f032d93F642f64180aa3
  CREATE2_COUNTER_ADDRESS: 0xFa6081FB320c75D8b22f7676D3A4e5A4C8f4B5c0
  CREATE2_USDT_MOCK_ADDRESS: 0x045fF50E3EaBc102fCaCF1ae20Dd9F20a1251ab4
  CREATE2_HERO_ADDRESS: 0xA1BFEAf640E2BceEb41C6a63586D82A232344313

# dotenv: ['.env']

tasks:
  default: task fg-test && task fg-fmt

  ## forge
  fg-build: forge build
  fg-test: forge test --gas-report
  fg-fmt: forge fmt

  ## multicall3 deployment

  mk-hello-bsct: |
    echo "## Deploy then verify Hello Contract..."
    forge create src/Hello.sol:Hello \
      --rpc-url $BSC_TESTNET_RPC_URL \
      --private-key $T0_KEY \
      -vv
    
    ## history logs
    # https://testnet.bscscan.com/address/0xA4cD33a273Cf2A6Ab2B05536b2F7E69c3b0f13ca#code

  vf-hello-bsct: |
    echo "## Deploy then verify Hello Contract..."
    addr="0xA4cD33a273Cf2A6Ab2B05536b2F7E69c3b0f13ca"
    forge verify-contract $addr src/Hello.sol:Hello \
      --verifier etherscan \
      --verifier-url $TEST_BSCSCAN_URL \
      # --etherscan-api-key $BSCSCAN_API_KEY \
      --chain-id 97 \
      --watch
    # not work??

  mk-hello2-sepolia: |
    echo "## Deploy then verify Hello2 Contract..."
    forge create src/Hello2.sol:Hello2 \
      --rpc-url $SEPOLIA_RPC_URL \
      --private-key $T0_KEY 
    
    ## history logs
    # https://sepolia.etherscan.io/address/0x6eeAeC18aCa849906A156b145aeA4198F39E0B7a

  vf-hello2-sepolia: |
    echo "## Deploy then verify Hello2 Contract..."
    addr="0x6eeAeC18aCa849906A156b145aeA4198F39E0B7a"
    forge verify-contract $addr src/Hello2.sol:Hello2 \
      --verifier etherscan \
      --verifier-url $SEPOLIA_ETHERSCAN_URL \
      --etherscan-api-key $ETHERSCAN_API_KEY \
      # -- chain sepolia \
      --chain-id 11155111 \
      --compiler-version "v0.8.28+commit.7893614a" \
      # --skip-is-verified-check \
      --watch --optimizer-runs 200

  mk-hello-sepolia: |
    echo "## Deploy then verify Hello Contract..."
    forge create src/Hello.sol:Hello \
      --rpc-url $SEPOLIA_RPC_URL \
      --private-key $T0_KEY 
    
    ## history logs
    # https://sepolia.etherscan.io/address/0xcCF0AFecAB1Ae43fE27cF674fa6675bE9A4135C0#code
    # 0x74BB4Fc01AF2dc81D95076Fe60e02037ed61224F
    # 0xBFb64A28d37bA72ab2ba1487a296430bC8747714
    # auto verify this step, so below step failed??

  vf-hello-sepolia: |
    echo "## Deploy then verify Hello Contract..."
    # addr="0xcCF0AFecAB1Ae43fE27cF674fa6675bE9A4135C0"
    addr="0x74BB4Fc01AF2dc81D95076Fe60e02037ed61224F"
    forge verify-contract $addr src/Hello.sol:Hello \
      --verifier etherscan \
      --verifier-url $SEPOLIA_ETHERSCAN_URL \
      --etherscan-api-key $ETHERSCAN_API_KEY \
      # -- chain sepolia \
      --chain-id 11155111 \
      --compiler-version "v0.8.28+commit.7893614a" \
      --skip-is-verified-check \
      --watch --optimizer-runs 200
  # not work, but verfied? https://sepolia.etherscan.io/address/0xcCF0AFecAB1Ae43fE27cF674fa6675bE9A4135C0#code

  # https://book.getfoundry.sh/tutorials/solidity-scripting#deploying-locally
  s-counter: |
    forge script script/Counter.s.sol:CounterScript \
      --rpc-url $ANVIL_RPC_URL \
      --broadcast -vv
  s-erc721: |
    forge script script/tokens/ERC721Token.s.sol:ERC721TokenScript \
      --rpc-url $ANVIL_RPC_URL \
      --broadcast -vv

  # https://book.getfoundry.sh/reference/forge/forge-script
  s-hello-on-blockscout: |
    forge script script/Hello.s.sol:HelloScript \
      --private-key $T0_KEY \
      --rpc-url $SEPOLIA_RPC_URL \
      --verifier blockscout \
      --verifier-url https://eth-sepolia.blockscout.com/api/ \
      --verify \
      --broadcast -vv
    ## verify on etherscan, blockscout(wait some moment)
    # https://eth-sepolia.blockscout.com/address/0xDd4b2a33BBE378455f3A04b021b656b580dB4514?tab=contract

  s-counter-on-blockscout: |
    forge script script/Counter.s.sol:CounterScript \
      --private-key $T0_KEY \
      --rpc-url $SEPOLIA_RPC_URL \
      --verifier blockscout \
      --verifier-url https://eth-sepolia.blockscout.com/api/ \
      --verify \
      --broadcast -vv

    ## NOTE
    # alreay verified by others, manual verify on blockscout UI
    # This contract has been verified using Blockscout Bytecode Database
    # https://eth-sepolia.blockscout.com/address/0xC9d29f6114aac0EEBdc24d758f6b3b0aaFd2Bb8F?tab=contract
    # about 2 weeks ago before above deployment
    # https://eth-sepolia.blockscout.com/address/0xdE2A91a55FEc30C36d0a7896Ee8862D34c74529D?tab=contract

  s-erc20token-on-blockscout: |
    echo "## Deploy and verify ERC20Token with multiple files dependencies..."
    forge script script/tokens/ERC20Token.s.sol:ERC20TokenScript \
      --private-key $T0_KEY \
      --rpc-url $SEPOLIA_RPC_URL \
      --verifier blockscout \
      --verifier-url=https://eth-sepolia.blockscout.com/api/ \
      --verify \
      --broadcast -vv
    
    ## NOTE  no verify on blockscout ???
    # https://eth-sepolia.blockscout.com/address/0x6Cec64B4A09892B1257983225a387B430Bb5a757?tab=contract
    # https://sepolia.etherscan.io/address/0x6cec64b4a09892b1257983225a387b430bb5a757#code
    # https://eth-sepolia.blockscout.com/address/0x374ccde06f563ba94b7f78c7b63a46aba7c361cd?tab=contract
    # https://sepolia.etherscan.io/address/0x374ccde06f563ba94b7f78c7b63a46aba7c361cd
  
  # docs: https://docs.blockscout.com/devs/verification/foundry-verification
  # NOTE: verify on blockscout and etherscan !!!
  erc20token-on-blockscout: |
    echo "## Deploy and verify ERC20Token with multiple files dependencies..."
    init_holder=$(cast wallet address --private-key $T0_KEY)
    forge create src/tokens/ERC20Token.sol:ERC20Token \
      --rpc-url $SEPOLIA_RPC_URL --private-key $T0_KEY \
      # API key for Blockscout verification is optional. \
      # --etherscan-api-key $SEPOLIA_BLOCKSCOUT_API_KEY \
      # etherscan, sourcify & blockscout \
      --verifier blockscout \
      --verifier-url=https://eth-sepolia.blockscout.com/api/ \
      --verify --verbose \
      --constructor-args "USDT Mock" "USDT" 6 $init_holder 1000000000000

    ## history logs
    # https://eth-sepolia.blockscout.com/address/0x5B43560964E3A32EF69695975f96C3AcDDd8C6c8?tab=contract
    # https://sepolia.etherscan.io/address/0x5b43560964e3a32ef69695975f96c3acddd8c6c8#code
    # https://eth-sepolia.blockscout.com/address/0xAf3B3319342C936F1f8451535d1aDdBF711828cA?tab=contract

  ## verify contract on bsct
  hello-bsct: |
    echo "## Deploy and verify Hello Contract..."
    forge create src/Hello.sol:Hello \
      --rpc-url $BSC_TESTNET_RPC_URL \
      --private-key $T0_KEY \
      --etherscan-api-key $BSCSCAN_API_KEY \
      # --verifier etherscan \
      --verify --verbose 
    
    ## history logs
    # https://testnet.bscscan.com/address/0x21aca5c0c6e950bc52e3d6dbac2f470107b6c815
    # similar contract
    # https://testnet.bscscan.com/find-similar-contracts?m=exact&a=0x1b2e9b8b457a26ac98559580f03781321b1dc64f
  
  erc20token-bsct: |
    echo "## Deploy and verify ERC20Token with multiple files dependencies..."
    init_holder=$(cast wallet address --private-key $T0_KEY)
    forge create src/tokens/ERC20Token.sol:ERC20Token \
      --rpc-url $BSC_TESTNET_RPC_URL \
      --private-key $T0_KEY \
      --etherscan-api-key $BSCSCAN_API_KEY \
      # --verifier etherscan \
      --verify --verbose \
      --constructor-args "USDT Mock" "USDT" 6 $init_holder 1000000000000
    
    ## history logs
    # https://testnet.bscscan.com/address/0x23c53b387b1aee16ff4922b6efb2f2cf27ad5ba0#code
  
  ## verify contract on sepolia, todo use script by https://sepolia.etherscan.io/address/0x848ce10da7813d4ca323878524735fbc0f68addf
  vt-hello: |
    echo "## Deploy and verify Hello Contract..."
    forge create src/Hello.sol:Hello \
      --rpc-url $SEPOLIA_RPC_URL --private-key $T0_KEY \
      --etherscan-api-key $ETHERSCAN_API_KEY \
      --verifier etherscan \
      --verify --verbose
    
    ## history logs
    # https://sepolia.etherscan.io/address/0x21aca5c0c6e950bc52e3d6dbac2f470107b6c815#code
    # also verified on multiple-chains explorer?
    # can explore but not verified, because not use verifier=
    # https://eth-sepolia.blockscout.com/address/0x21ACa5C0C6E950Bc52e3D6DbAc2f470107b6C815?tab=contract

  vt-erc20token: |
    echo "## Deploy and verify ERC20Token with multiple files dependencies..."
    init_holder=$(cast wallet address --private-key $T0_KEY)
    forge create src/tokens/ERC20Token.sol:ERC20Token \
      --rpc-url $SEPOLIA_RPC_URL --private-key $T0_KEY \
      --etherscan-api-key $ETHERSCAN_API_KEY --verifier etherscan \
      --verify --verbose \
      --constructor-args "USDT Mock" "USDT" 6 $init_holder 1000000000000

    ## history logs
    # https://sepolia.etherscan.io/address/0x1b2e9b8b457a26ac98559580f03781321b1dc64f#code
    # https://eth-sepolia.blockscout.com/address/0x1b2E9B8B457a26Ac98559580f03781321b1DC64f?tab=logs
 
  ## tk create2-contracts
  c2-test: |
    echo "## test2 token {{.CREATE2_USDT_MOCK_ADDRESS}}"
    echo "name()returns(string)"
    cast call {{.CREATE2_USDT_MOCK_ADDRESS}} "name()returns(string)"
    echo "symbol()returns(string)"
    cast call {{.CREATE2_USDT_MOCK_ADDRESS}} "symbol()returns(string)"
    echo "decimals()returns(uint8)"
    cast call {{.CREATE2_USDT_MOCK_ADDRESS}} "decimals()returns(uint8)"
    echo "initHolder()returns(address)"
    cast call {{.CREATE2_USDT_MOCK_ADDRESS}} "initHolder()returns(address)"
    echo "initSupply()returns(uint256)"
    cast call {{.CREATE2_USDT_MOCK_ADDRESS}} "initSupply()returns(uint256)"
    echo "balanceOf ALICE_ADDRESS={{.ALICE_ADDRESS}}"
    cast call {{.CREATE2_USDT_MOCK_ADDRESS}} "balanceOf(address)returns(uint256)" {{.ALICE_ADDRESS}}
    echo "balanceOf CREATE2_FACTORY={{.CREATE2_FACTORY}}"
    cast call {{.CREATE2_USDT_MOCK_ADDRESS}} "balanceOf(address)returns(uint256)" {{.CREATE2_FACTORY}}

    echo "## Hero ERC721Token"
    echo "name()returns(string)"
    cast call {{.CREATE2_HERO_ADDRESS}} "name()returns(string)"
    echo "symbol()returns(string)"
    cast call {{.CREATE2_HERO_ADDRESS}} "symbol()returns(string)"
    echo "mintPrice()returns(uint256)"
    cast call {{.CREATE2_HERO_ADDRESS}} "mintPrice()returns(uint256)"
    echo "totalSupply()returns(uint256)"
    cast call {{.CREATE2_HERO_ADDRESS}} "totalSupply()returns(uint256)"

  ## Anvil: anvil --help
  # https://book.getfoundry.sh/reference/anvil/
  anvil: |
    echo "Starting anvil test evm node"
    tmux kill-session -t anvil || true
    tmux new-session -d -s anvil "anvil" || true
    sleep 2
    task anvil-init
    echo "run [ tmux a ] to attach anvil tmux session!"
    
  anvil-init: |
    source .envrc
    forge script script/AnvilInit.s.sol:AnvilInitScript --rpc-url $ANVIL_RPC_URL --broadcast
    task deploy-multicall3
  
    
  # todo: using forge script!!!
  deploy-multicall3: |
    deployerAddr="0x05f32B3cC3888453ff71B01135B34FF8e41263F2"
    nonce=$(cast nonce $deployerAddr --rpc-url $ANVIL_RPC_URL)
    if [ "$nonce" -eq 0 ]; then
        cast send --from $A0_ADDR --private-key $A0_KEY $deployerAddr --value 0.5ether --rpc-url $ANVIL_RPC_URL
        cast balance $deployerAddr --rpc-url $ANVIL_RPC_URL
        tx=$(cast rpc eth_sendRawTransaction --rpc-url $ANVIL_RPC_URL "$(cat src/multicall3-pre-signed.dat)")
        # 0xcA11bde05977b3631167028862bE2a173976CA11
        cast compute-address $deployerAddr --nonce 0
    else
        # error code -32003: nonce too low
        echo "nonce($nonce) != 0, maybe deployed!"
    fi

  up-abi-bin: |
    task counter-abi-bin
    task erc20token-abi-bin
    task nft-abi-bin

  anvil-keys: cat keys/anvil.key | head -n 24 | tail -n +11
  anvil-accounts: cast rpc eth_accounts | jq
  accounts: task anvil-accounts
  # https://book.getfoundry.sh/config/shell-autocompletion#zsh
  # this ok!
  comp-omz: |
    mkdir -p $HOME/.oh-my-zsh/completions
    forge completions zsh > $HOME/.oh-my-zsh/completions/_forge
    cast completions zsh > $HOME/.oh-my-zsh/completions/_cast
    anvil completions zsh > $HOME/.oh-my-zsh/completions/_anvil
    ls -l $HOME/.oh-my-zsh/completions/_*
  # below not ok!
  comp-zsh: |
    forge completions zsh > /opt/homebrew/completions/zsh/_forge
    cast completions zsh > /opt/homebrew/completions/zsh/_cast
    anvil completions zsh > /opt/homebrew/completions/zsh/_anvil
  comp-zsh-clean: |
    rm -f /opt/homebrew/completions/zsh/_forge
    rm -f /opt/homebrew/completions/zsh/_cast
    rm -f /opt/homebrew/completions/zsh/_anvil
    ls -l /opt/homebrew/completions/zsh/_*

  ## Cast https://book.getfoundry.sh/reference/anvil/#standard-methods
  node: cast rpc anvil_nodeInfo | jq
  # balance setting
  # cast rpc anvil_setBalance 0xa59daA5b1DD0fe5bC162d53856A037e04f28FcDF $(cast tw 10000 | cast th)
  # cast rpc eth_getBalance 0xa59daA5b1DD0fe5bC162d53856A037e04f28FcDF latest
  balance: |
    dec=$(cast rpc eth_getBalance {{.CLI_ARGS}} latest | tr -d '"' | cast to-dec)
    echo "$dec / 1e18" | bc -l
  a: task balance -- {{.ALICE_ADDRESS}}

  # https://book.getfoundry.sh/tutorials/forking-mainnet-with-cast-anvil
  # This calls Anvil and lets us impersonate our unlucky user
  # $ cast rpc anvil_impersonateAccount $UNLUCKY_USER
  # $ cast send $DAI \
  # --from $UNLUCKY_USER \
  #   "transfer(address,uint256)(bool)" \
  #   $ALICE \
  #   300000000000000000000000 \
  #   --unlocked
  # cast call $DAI \
  # "balanceOf(address)(uint256)" \
  # $ALICE

  ## Try

  # create2 factory
  # https://github.com/foundry-rs/foundry/pull/5391
  # https://github.com/foundry-rs/foundry/discussions/3587
  # https://github.com/foundry-rs/foundry/issues/2638
  # https://github.com/Arachnid/deterministic-deployment-proxyc
  # foundry-built-in create2 deployer
  create2-builtin-code: cast code {{.CREATE2_FACTORY}}
  create2-create: |
    forge create src/Create2.sol:Create2 \
      --rpc-url={{.ANVIL_RPC_URL}} --private-key={{.ALICE_KEY}} \
      --json 
      # --etherscan-api-key <your_etherscan_api_key> \
      # --verify
      
  create2-test: forge test --match-path test/Create2.t.sol --match-test testReDeploy -vvvv

  create2-abi: forge inspect Create2 abi
  create2-bin: forge inspect Create2 bytecode
  create2-abi-bin: |
    ABI=$(task create2-abi)
    BIN=$(task create2-bin)

    cat <<EOL > _local/Create2.json
    {
      "abi": $ABI,
      "bin": "$BIN"
    }
    EOL
  
  c2-counter: |
    deployer={{.CREATE2_FACTORY}}
    salt=$(cast to-bytes32 0x1234)
    initcode=$(task counter-bin)
    addr=$(cast create2 --deployer $deployer --salt $salt --init-code $initcode)
    echo "computed counter address: $addr"
    cast code $addr
    cast send $deployer \
      "deploy(bytes32,bytes)" $salt $initcode \
      --rpc-url {{.ANVIL_RPC_URL}} --private-key {{.ALICE_KEY}} || true
    cast send $addr "increment()" --private-key {{.ALICE_KEY}}
    echo "computed counter address: $addr, its current number"
    cast call $addr "number()"

  # todo: 使用自带的create2 deployer 部署失败!
  c2: |
    deployer={{.CREATE2_FACTORY}}
    # 0x1200000000000000000000000000000000000000000000000000000000000000
    salt=$(cast --to-bytes32 0x12)
    initcode=$(task counter-bin)
    addr=$(cast create2 --deployer $deployer --salt $salt --init-code $initcode)
    echo "computed counter address: $addr"
    # cast code $addr
    initcode2=${initcode:2}

    # 手动计算
    INIT_CODE_HASH=$(cast keccak $initcode2)
    CREATE2_INPUT="0xff${deployer:2}${salt:2}${INIT_CODE_HASH:2}"
    CREATE2_ADDRESS="0x$(cast keccak $CREATE2_INPUT | tail -c 41)"
    echo "CREATE2_ADDRESS= $CREATE2_ADDRESS"
    ## function deploy(uint256 salt, bytes memory initCode) external payable returns (address);
    cast send $deployer \
      "deploy(uint256,bytes)" $salt $initcode2 \
      --rpc-url {{.ANVIL_RPC_URL}} --private-key {{.ALICE_KEY}}  --verbose

    # cast send $addr "increment()" --private-key {{.ALICE_KEY}}
    # echo "computed counter address: $addr, its current number"
    # cast call $addr "number()"

  ## ERC20 eg. USDT
  # Note: The --constructor-args flag must be positioned last in the command, since it takes multiple values.
  erc20token-create: |
    json=$(forge create src/tokens/ERC20Token.sol:ERC20Token --rpc-url={{.ANVIL_RPC_URL}} \
      --private-key={{.ALICE_KEY}} \
      --json \
      # --etherscan-api-key <your_etherscan_api_key> \
      # --verify \
      --constructor-args "USDT Mock" "USDT" 6 10000000000
      )
    deployedTo=$(echo $json | jq .deployedTo | tr -d '"')
    echo "deployedTo=$deployedTo with alice balance"
    cast call $deployedTo "balanceOf(address)(uint256)" {{.ALICE_ADDRESS}}

  erc20token-abi: forge inspect ERC20Token abi
  erc20token-bin: forge inspect ERC20Token bytecode
  erc20token-abi-bin: |
    ABI=$(task erc20token-abi)
    BIN=$(task erc20token-bin)

    cat <<EOL > _local/ERC20Token.json
    {
      "abi": $ABI,
      "bin": "$BIN"
    }
    EOL

  ## ERC721 eg. Hero
  # forge create ERC721Token --rpc-url=$ANVIL_RPC_URL --private-key=$ALICE_KEY --constructor-args <name> <symbol>
  nft-create: |
    forge create src/tokens/nft.sol:ERC721Token --rpc-url={{.ANVIL_RPC_URL}} --private-key={{.ALICE_KEY}} \
      --json \
      --constructor-args "Hero profile" "HERO" 
      # --etherscan-api-key <your_etherscan_api_key> \
      # --verify 
  
  nft-send: cast send --rpc-url={{.ANVIL_RPC_URL}} --private-key={{.ALICE_KEY}} {{.CLI_ARGS}}
  nft-mint: task nft-send -- 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9  "mintTo(address)" {{.ALICE_ADDRESS}} 
  nft-call: cast call --rpc-url={{.ANVIL_RPC_URL}} --private-key={{.ALICE_KEY}} {{.CLI_ARGS}}
  nft-owner: task nft-call -- 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9 "ownerOf(uint256)" 1
  
  nft-abi: forge inspect ERC721Token abi
  nft-bin: forge inspect ERC721Token bytecode
  nft-abi-bin: |
    ABI=$(task nft-abi)
    BIN=$(task nft-bin)

    cat <<EOL > _local/ERC721Token.json
    {
      "abi": $ABI,
      "bin": "$BIN"
    }
    EOL

  ## Counter
  counter-create: |
    forge create --rpc-url={{.ANVIL_RPC_URL}} --private-key={{.ALICE_KEY}} \
      # --etherscan-api-key <your_etherscan_api_key> \
      # --verify \
      src/Counter.sol:Counter

  counter-abi: forge inspect Counter abi
  counter-bin: forge inspect Counter bytecode
  # forge build
  counter-bin2: cat out/Counter.sol/Counter.json | jq -r '.bytecode.object' 
  
  counter-abi-bin: |
    # solc --combined-json abi,bin src/Counter.sol:Counter | \
    # jq ".contracts | to_entries | .[1].value " > _local/Counter.json
    ABI=$(task counter-abi)
    BIN=$(task counter-bin)

    cat <<EOL > _local/Counter.json
    {
      "abi": $ABI,
      "bin": "$BIN"
    }
    EOL

  ## Setup env

  # show current config
  cfg: forge config

  mapping: forge remappings
  vs-sol-mapping: forge remappings > remappings.txt
  deps-install: |
    # forge install transmissions11/solmate@v7
    # forge install transmissions11/solmate
    forge install transmissions11/solmate Openzeppelin/openzeppelin-contracts
  # forge update lib/solmate
  deps-up: forge update

  ## Foundry toolchain
  # https://book.getfoundry.sh/getting-started/installation
  setup-foundryup: curl -L https://foundry.paradigm.xyz | bash
  fup: foundryup

  # use template: https://github.com/foundry-rs/forge-template
  mk-hello-foundry: forge init hello-foundry --shallow

  env-test: |
    echo ALICE_ADDRESS = $ALICE_ADDRESS
    echo SEPOLIA_RPC_URL=$SEPOLIA_RPC_URL 
    echo ANVIL_RPC_URL=$ANVIL_RPC_URL in env syntax ANVIL_RPC_URL={{.ANVIL_RPC_URL}} in var syntax
    echo UNKNOWN_ENV=$UNKNOWN_ENV in env syntax  UNKNOWN_ENV={{.UNKNOWN_ENV}} in var syntax
    echo UNKNOWN_VAR=$UNKNOWN_VAR in env syntax  UNKNOWN_ENV={{.UNKNOWN_VAR}} in var syntax
  et: task env-test
