// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Hello} from "../src/Hello.sol";

contract HelloTest is Test {
    Hello public hello;
    string constant message = "hello solidity in foundry!";

    function setUp() public {
        // console.log("message sender", msg.sender, "init balance", msg.sender.balance);
        hello = new Hello();
    }

    function test_Greeting() public {
        assertEq(hello.message(), "");
        address setter = address(123);
        // anyone can set hello message
        vm.prank(setter);
        hello.set(message);
        assertEq(hello.message(), message);
        vm.stopPrank();
    }

    function testCoedes() public pure {
        // forge inspect Hello bytecode
        bytes memory bytecode =
            hex"6080604052348015600e575f5ffd5b506104188061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80634ed3885e146100435780636d4ce63c14610058578063e21f37ce14610076575b5f5ffd5b6100566100513660046101bb565b61007e565b005b61006061008d565b60405161006d919061026e565b60405180910390f35b61006061011c565b5f6100898282610327565b5050565b60605f805461009b906102a3565b80601f01602080910402602001604051908101604052809291908181526020018280546100c7906102a3565b80156101125780601f106100e957610100808354040283529160200191610112565b820191905f5260205f20905b8154815290600101906020018083116100f557829003601f168201915b5050505050905090565b5f8054610128906102a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610154906102a3565b801561019f5780601f106101765761010080835404028352916020019161019f565b820191905f5260205f20905b81548152906001019060200180831161018257829003601f168201915b505050505081565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156101cb575f5ffd5b813567ffffffffffffffff8111156101e1575f5ffd5b8201601f810184136101f1575f5ffd5b803567ffffffffffffffff81111561020b5761020b6101a7565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561023a5761023a6101a7565b604052818152828201602001861015610251575f5ffd5b816020840160208301375f91810160200191909152949350505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b600181811c908216806102b757607f821691505b6020821081036102d557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561032257805f5260205f20601f840160051c810160208510156103005750805b601f840160051c820191505b8181101561031f575f815560010161030c565b50505b505050565b815167ffffffffffffffff811115610341576103416101a7565b6103558161034f84546102a3565b846102db565b6020601f821160018114610387575f83156103705750848201515b5f19600385901b1c1916600184901b17845561031f565b5f84815260208120601f198516915b828110156103b65787850151825560209485019460019092019101610396565b50848210156103d357868401515f19600387901b60f8161c191681555b50505050600190811b0190555056fea26469706673582212201f2a3b86ee09536c0284710d9a485de6275afe6cebd52098567b9ad106dc9e2c64736f6c634300081c0033";
        assertEq(type(Hello).creationCode, bytecode);
        // runtime code generated by creationCode when run constuct()?
        assertNotEq(type(Hello).runtimeCode, bytecode);
    }
}
